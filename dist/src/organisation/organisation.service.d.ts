import { DeepPartial, DeleteResult, Repository } from 'typeorm';
import { CreateOrganisationBranch, CreateOrganisationPartner, CreateOrganisationShift } from './dto/create-organisation.dto';
import { UpdateOrganisationDto } from './dto/update-organisation.dto';
import Organisation from './entities/organisation.entity';
import OrganisationBranch from './entities/organisationBranch.entity';
import OrganisationPartner from './entities/organisationPartner.entity';
import OrganisationShift from './entities/organisationShfit.entity';
import OrganisationJoinRequest from './entities/organisationJoinRequest.entity';
import { User } from 'src/user/entities/user.entity';
export declare class OrganisationService {
    private organisationRepository;
    private organisationBranchRepository;
    private organisationShiftRepository;
    private organisationPartnerRepository;
    private organisationJoinRequestRepository;
    constructor(organisationRepository: Repository<Organisation>, organisationBranchRepository: Repository<OrganisationBranch>, organisationShiftRepository: Repository<OrganisationShift>, organisationPartnerRepository: Repository<OrganisationPartner>, organisationJoinRequestRepository: Repository<OrganisationJoinRequest>);
    create(data: DeepPartial<Organisation>): Organisation;
    save(data: Organisation): Promise<Organisation>;
    createOneOrganisationBranch(data: CreateOrganisationBranch, organisationId: number): Promise<OrganisationBranch>;
    createOrganisationBranch(data: CreateOrganisationBranch[], organisationId?: number): Promise<OrganisationBranch[]>;
    createOrganisationShift(data: CreateOrganisationShift[], organisationId?: number): Promise<OrganisationShift[]>;
    createOrganisationPartner(data: CreateOrganisationPartner[], organisationId?: number): Promise<OrganisationPartner[]>;
    createOrganisationJoinRequest(data: DeepPartial<OrganisationJoinRequest>): Promise<OrganisationJoinRequest>;
    updatJoinReqSeenMany(ids: number[]): Promise<import("typeorm").UpdateResult>;
    deleteOrganisationBranch(id: number): Promise<DeleteResult>;
    deleteOrganisationShift(organisation: Organisation): Promise<DeleteResult>;
    findAllByUser(userId: number): Promise<Organisation[]>;
    findAll(): Promise<Organisation[]>;
    findAllOrganisationBranch(): Promise<OrganisationBranch[]>;
    findOne(id: number): Promise<Organisation>;
    findPartnersByOrg(id: number): Promise<Organisation>;
    findPartnersByPhoneNumber(phoneNumber: string): Promise<OrganisationPartner[]>;
    checkOrgPartnerByUser(user: User): Promise<void>;
    findByStaff(staffId: number): Promise<Organisation>;
    findOneOrThrow(id: number): Promise<Organisation>;
    findOneOrgBranchByCode(code: string): Promise<OrganisationBranch>;
    findOneOrgBranchByCodeOrThrow(code: string): Promise<OrganisationBranch>;
    findOneBranch(id: number): Promise<OrganisationBranch>;
    findOneOrganisationJoinRequest(organisationBranchId: number, userId: number): Promise<OrganisationJoinRequest>;
    findManyOrganisationJoinRequest(organisationBrnachId: number): Promise<OrganisationJoinRequest[]>;
    findOneBranchOrThrow(id: number): Promise<OrganisationBranch>;
    update(id: number, updateOrganisationDto: UpdateOrganisationDto): Promise<import("typeorm").UpdateResult>;
    updateOrgPartner(id: number, data: DeepPartial<OrganisationPartner>): Promise<import("typeorm").UpdateResult>;
    updateOrgBranch(id: number, data: DeepPartial<OrganisationBranch>): Promise<import("typeorm").UpdateResult>;
    deleteOneOrganisationJoinRequest(organisationBranchId: number, userId: number): Promise<DeleteResult>;
    deleteOrgJoinReq(id: number): Promise<DeleteResult>;
    remove(id: number): Promise<DeleteResult>;
    removeAll(): Promise<DeleteResult>;
    generateUniqueCodeByOrganisationBranch(): Promise<string>;
}
